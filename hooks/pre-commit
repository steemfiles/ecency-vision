#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.
This can cause problems if you want to work with people on other platforms.
To be portable it is advisable to rename the file.
If you know what you are doing you can disable this check using:
  git config hooks.allownonascii true
EOF
	exit 1
fi

STAGED_TYPESCRIPT_FILES=$(git diff --cached --name-only --diff-filter=ACMR | sed 's| |\\ |g' | egrep \.tsx?)
WORKING_TYPESCRIPT_FILES=$(git diff --name-only --diff-filter=ACMR | sed 's| |\\ |g' | egrep \.tsx?)
if [ -z "$WORKING_TYPESCRIPT_FILES" ] 
then
	# Prettify all files
	./node_modules/.bin/prettier --ignore-unknown --write $STAGED_TYPESCRIPT_FILES
	# Add for the commit
	git add $STAGED_TYPESCRIPT_FILES
else
	./node_modules/.bin/prettier --ignore-unknown --write $WORKING_TYPESCRIPT_FILES
	echo 'Cannot reformat files while work area is modified'
	exit 1
fi


STAGED_CPP_SOURCES=$(git diff --cached --name-only --diff-filter=ACMR | sed 's| |\\ |g' | egrep \.[hc]pp)
WORKING_CPP_SOURCES=$(git diff --name-only --diff-filter=ACMR | sed 's| |\\ |g' | egrep \.[hc]pp)
if [ -z "$WORKING_CPP_SOURCES" ] 
then
	if [ -n "$STAGED_CPP_SOURCES" ]
	then		
		# Prettify all files
		clang-format-12 -i  $STAGED_CPP_SOURCES
		# Add for the commit
		git add $STAGED_CPP_SOURCES
	fi
else
	clang-format-12 -i $WORKING_CPP_SOURCES
	echo 'Cannot reformat files while work area is modified'
	exit 1
fi


# Finally if all of this works, try to build it!
exec yarn build

